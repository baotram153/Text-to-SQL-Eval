Gold SQL String: select country, count(customernumber) as customer_count from customers group by country
Predicted SQL String: SELECT "car_retails_customers"."country" AS "crc_c_6538d5", COUNT("car_retails_customers"."customernumber") AS "customer_count" FROM "car_retails"."customers" "car_retails_customers" GROUP BY 1 ORDER BY 1 ASC
Gold SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Predicted SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Gold SQL String: select distinct t1.productvendor, t1.msrp - t1.buyprice from products as t1 inner join orderdetails as t2 on t1.productcode = t2.productcode group by t1.productvendor, t1.msrp, t1.buyprice order by sum(t2.quantityordered) desc limit 1
Predicted SQL String: WITH "aql__t1" AS ( SELECT "car_retails_products"."productvendor" AS "car_retails_products->productvendor", COUNT("car_retails_orderdetails"."ordernumber") AS "count_car_retails_orderdetails->ordernumber", SUM(("car_retails_orderdetails"."quantityordered" * "car_retails_orderdetails"."priceeach")) AS "sum_5eaa1" FROM "car_retails"."orderdetails" "car_retails_orderdetails" LEFT JOIN "car_retails"."products" "car_retails_products" ON "car_retails_orderdetails"."productcode" = "car_retails_products"."productcode" GROUP BY 1 ), "aql__t4" AS ( SELECT "aql__t1"."car_retails_products->productvendor" AS "crp_p_0aa5b5", "aql__t1"."count_car_retails_orderdetails->ordernumber" AS "order_count", "aql__t1"."sum_5eaa1" AS "total_earnings", CAST ( NULL AS numeric ) AS "vendor_rank_by_orders" FROM "aql__t1" WHERE CAST ( NULL AS numeric ) = 1.0 ) SELECT "aql__t4"."crp_p_0aa5b5" AS "crp_p_0aa5b5", "aql__t4"."order_count" AS "order_count", "aql__t4"."total_earnings" AS "total_earnings", "aql__t4"."vendor_rank_by_orders" AS "vendor_rank_by_orders" FROM "aql__t4" WHERE "aql__t4"."vendor_rank_by_orders" = 1.0 ORDER BY 2 DESC, 1 ASC
Gold SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Predicted SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Gold SQL String: select e.firstname as first_name, e.lastname as last_name, sum(p.amount) as total_payment from payments p left join customers c on p.customernumber = c.customernumber left join employees e on c.salesrepemployeenumber = e.employeenumber where p.paymentdate >= '2004-01-01' and p.paymentdate < '2005-01-01' group by e.firstname, e.lastname order by total_payment desc
Predicted SQL String: SELECT "car_retails_employees"."employeenumber" AS "cre_e_0b2f9b", "car_retails_employees"."firstname" AS "cre_f_76292b", "car_retails_employees"."lastname" AS "cre_l_eebe4a", SUM("car_retails_payments"."amount") AS "total_payment_revenue" FROM "car_retails"."payments" "car_retails_payments" LEFT JOIN "car_retails"."customers" "car_retails_customers" ON "car_retails_payments"."customernumber" = "car_retails_customers"."customernumber" LEFT JOIN "car_retails"."employees" "car_retails_employees" ON "car_retails_customers"."salesrepemployeenumber" = "car_retails_employees"."employeenumber" WHERE (CAST ( "car_retails_payments"."paymentdate" AS date ) >= CAST ( '2004-01-01' AS date )) AND (CAST ( "car_retails_payments"."paymentdate" AS date ) < CAST ( '2005-01-01' AS date )) GROUP BY 1, 2, 3 ORDER BY 4 DESC, 1 ASC
Gold SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Predicted SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Gold SQL String: select sum(od.quantityordered * od.priceeach) as total_product_price from car_retails.orderdetails od join car_retails.orders o on od.ordernumber = o.ordernumber join car_retails.customers c on o.customernumber = c.customernumber where c.customername = 'rovelli gifts distributors ltd.' and o.shippeddate >= '2003-01-01' and o.shippeddate <= '2003-12-31'
Predicted SQL String: SELECT SUM(("car_retails_orderdetails"."quantityordered" * "car_retails_orderdetails"."priceeach")) AS "total_price" FROM "car_retails"."orderdetails" "car_retails_orderdetails" LEFT JOIN "car_retails"."orders" "car_retails_orders" ON "car_retails_orderdetails"."ordernumber" = "car_retails_orders"."ordernumber" LEFT JOIN "car_retails"."customers" "car_retails_customers" ON "car_retails_orders"."customernumber" = "car_retails_customers"."customernumber" WHERE ("car_retails_customers"."customername" = ('Rovelli Gifts')) AND (CAST ( "car_retails_orders"."shippeddate" AS date ) <= CAST ( '2003-12-31' AS date )) AND (CAST ( "car_retails_orders"."shippeddate" AS date ) >= CAST ( '2003-01-01' AS date ))
Gold SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Predicted SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Gold SQL String: select count(*) as employee_count from car_retails.employees left join car_retails.offices on car_retails.employees.officecode = car_retails.offices.officecode where city = 'sydney'
Predicted SQL String: SELECT "car_retails_offices"."city" AS "cro_c_8a8b29", COUNT(DISTINCT "car_retails_employees"."employeenumber") AS "employee_count" FROM "car_retails"."employees" "car_retails_employees" LEFT JOIN "car_retails"."offices" "car_retails_offices" ON "car_retails_employees"."officecode" = "car_retails_offices"."officecode" WHERE "car_retails_offices"."city" = 'Sydney' GROUP BY 1 ORDER BY 1 ASC
Gold SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
Predicted SQL Dict: Sql(type=sql, 
select=Select(col_units=[]), 
from_=From(table_unit=None, joins=[]), 
where=Where(conds=[]), 
group_by=GroupBy(col_units=[]), 
having=Having(conds=[]), 
order_by=OrderBy(order_cols=[]), 
limit=Limit(value=None), 
intersect=None, 
union=None, 
except_=None)
